generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     String

  token    Token[]
  customer Customer?
  cart     Cart?
  rental   Rental[]
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  userAgent String
}

model Customer {
  id         Int    @id @default(autoincrement())
  firstName  String
  secondName String
  lastName   String
  phone      String 

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartEquipment CartEquipment[]
}

model CartEquipment {
  id       Int @id @default(autoincrement())
  quantity Int

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Equipment {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  pricePerDay String
  quantity    Int

  cartEquipment   CartEquipment[]
  rentalEquipment RentalEquipment[]

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  fileId Int
  file   File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Brand {
  id        Int         @id @default(autoincrement())
  name      String
  equipment Equipment[]
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  equipment   Equipment[]

  fileId Int
  file   File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Rental {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  totalAmount Int

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  statusId Int @default(1)
  status   Status  @relation(fields: [statusId], references: [id], onDelete: Cascade)

  rentalEquipment RentalEquipment[]
  payment         Payment[]
}

model RentalEquipment {
  id       Int @id @default(autoincrement())
  quantity Int

  rentalId Int
  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)

  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Payment {
  id     Int      @id @default(autoincrement())
  date   DateTime
  method String
  amount Int

  rentalId Int
  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
}

model Status {
  id     Int      @id @default(autoincrement())
  name   String
  rental Rental[]
}

model File {
  id       Int    @id @default(autoincrement())
  filename String
  mimetype String
  data     Bytes

  equipment Equipment[]
  category  Category[]
}
